#!/usr/bin/env ruby
# @todo API => remove "open data etc text automagy"

require "time"
require "json"
require "logger"
require "digest/sha1"
require "uuidtools"
require "hashie"

begin
  
  log = Logger.new(STDERR)
  log.level = Logger::WARN
  
  NICE2015 = "https://data.npolar.no/dataset/7f7e56d0-9e70-4363-b37d-17915e09a935"
  
  NPOLAR_TOPICS = [
    "atmosphere",
    "biology",
    "chemistry",
    "climate",
    "conservation",
    "ecology",
    "ecotoxicology",
    "environment",
    "geology",
    "glaciology",
    "management",
    "marine",
    "maps",
    "oceanography",
    "other",
    "remote-sensing",
    "seaice",
    "terrestrial",
    "topography",
    "vegetation"
  ]
  
  ISO_TOPICS=[
    "biota",
    "boundaries",
    "climatologyMeteorologyAtmosphere",
    "economy",
    "elevation",
    "environment",
    "farming",
    "geoscientificInformation",
    "health",
    "imageryBaseMapsEarthCover",
    "inlandWaters",
    "intelligenceMilitary",
    "location",
    "oceans",
    "planningCadastre",
    "society",
    "structure",
    "transportation",
    "utilitiesCommunication"
  ]
  
  # uit = { name: "UiT The Arctic University of Norway"}
  # Pierre and Marie Curie University
  # Bristol University
  # ETH Zurich
  # UiT Norways Arctic University
  # Korean Polar Research Institute
  # Washington State University
  # Hokkaido University
  
  comma_lambda = lambda {|t|
    if t !~ /,/
      [t.to_s.strip]
    else
      t.split(",").map {|t| t.to_s.strip }
    end
  }
  
  row_lambda = lambda {|r|
    
    uri = "#{NICE2015}/#{r['id']}"
    uuid = UUIDTools::UUID.sha1_create(UUIDTools::UUID_URL_NAMESPACE, uri)
    
    sets=["arctic", "gcmd.nasa.gov", "marine", "N-ICE2015"]
    
    topics = comma_lambda.call(r.Topics)
    collection = comma_lambda.call(r.Collection)
    
    floe = comma_lambda.call(r.Floe)
    floe = floe.map {|f| "Floe-#{f}"}
    
    leg = comma_lambda.call(r.Leg)
    leg = leg.map {|f| "Leg-#{f}"}
    
    tags = ["Lance", "ICE", "N-ICE2015"] + collection + floe + leg
    tags.uniq!
    
    topics = (["marine"] + topics).uniq
    topics.each {|t|
      if not NPOLAR_TOPICS.include? t
        tags << t
      end
    }
    topics = topics.reject {|t| t == "snow"}
    topics.each {|t|
      if not NPOLAR_TOPICS.include? t
        raise "Bad topic: #{t}"
      end
    }
    npolar = { name: "Norwegian Polar Institute",
      id: "npolar.no",
      gcmd_short_name: "NO/NPI",
      roles: [
        "publisher"
      ]
    }
    
    if r.Owner !~ /,/
      owners = [r.Owner]
    else
      owners = r.Owner.split(",").map {|o|o.strip}
    end
    roles = ["author", "owner"]
    owners = owners.map {|o|
      if o =~ /(Norwegian Polar Institute|Norsk Polarinstitutt)/
         npolar_is_metadata_publisher_and_owner = npolar.dup
         npolar_is_metadata_publisher_and_owner[:roles] << "owner"
         npolar_is_metadata_publisher_and_owner[:roles] << "author"
         npolar_is_metadata_publisher_and_owner
      else
        { name: o, roles: roles }
      end
    }
    
    # Make sure npolar is metadata publisher
    if owners.none? {|o| o.key? :id and o[:id] == "npolar.no" }
      log.warn owners.to_json
      owners << npolar
    end
    
    
    if r.PointOfContact !~ /,/
      contacts = [r.PointOfContact]
      emails = [r.Email]
    else
      contacts = r.PointOfContact.split(",").map {|c| c.strip }
      emails = r.Email.split(",").map {|e| e.strip }
    end
    
    pointOfContact = []
    contacts.each_with_index {|c,i|
      f_n, l_n = c.split(" ")
      pointOfContact << { first_name: f_n, last_name: l_n, email: emails[i], roles: ["pointOfContact"] }
    }
    
    d = Hashie::Mash.new({
      id: uuid,
      comment: r.WP,
      title: r.Title,
      summary: r.Summary,
      draft: "no",
      progress: r.Progress.downcase,
      licences: ["http://creativecommons.org/licenses/by/4.0/"],
      released: "2017-07-01T00:00:00Z",
      activity: [{start: "2015-01-11T00:00:00Z"},{stop: "2015-06-24T00:00:00Z"}],
      coverage: [{
        "north": 83,
        "east": 27,
        "south": 80,
        "west": 2
      }],
      organisations: owners,
      people: pointOfContact,
      tags: tags,
      topics: topics,
      sets: sets,
      links: [{rel: "parent",
        href: NICE2015,
        title: "N-ICE2015 datasets",
        type: "text/html"
      }],
      created_by: "mats.granskog@npolar.no",
      schema: "http://api.npolar.no/schema/dataset-1",
      lang: "en",
      collection: "dataset",
      updated_by: "mats.granskog@npolar.no"
    })
    
    if not r.Contributors.nil?
      d.comment += ". Contributors: #{r.Contributors}"
    end
    
    log.info d.to_json
    d
  }

  arr = JSON.parse(File.read(ARGV[0]))
  select = ["WP1","WP2"]
  datasets = []
  
  log.debug __FILE__+" read #{arr.size} rows, selecting WP == #{select.to_json}"
  
  arr = arr.select {|r| select.include? r["WP"] }   
  datasets = arr.map {|r| row_lambda.call(Hashie::Mash.new(r)) }
  puts datasets.to_json
  exit(0)

rescue => e

  puts e
  puts e.backtrace
  exit(1)

end


# https://app2.data.npolar.no/dataset/d8cebe0cdbc46d887e4f7252ce00160b

# N-ICE2015 project (note bad state - "planned")
# https://data.npolar.no/project/b98886ce-590a-48a8-b113-4b96e98c65c8

# N-ICE2015 expedition
# https://data.npolar.no/expedition/963fd951-48be-4a5a-9505-8fcbe7f34d94

# N-ICE2015 project topics: topics
# climate (5) seaice (4) other (2) atmosphere (1) biology (1) chemistry (1) ecology (1) marine (1) oceanography (1)#sub projects

# N-ICE2015 sub projects
# http://api.npolar.no/project/?q=&filter-links.href=https://data.npolar.no/project/b98886ce-590a-48a8-b113-4b96e98c65c8
#!/usr/bin/env ruby

require "rubygems"
require "bundler/setup"
require "highline/import"
require "json"
require "uri"
require "securerandom"
require "logger"
require "npolar/api/client"

require_relative "./../lib/npolar/api/bootstrap"
require_relative "./../lib/npolar/validation"
require_relative "./../lib/npolar/auth/couch"
require_relative "./../lib/service"


def ask_uri(displayname, uri, default)
  p = URI::Parser.new
  
  begin
    uri = p.parse(uri)
  rescue
    uri = p.parse(default)
  end

  say("\n<%= color(\"#{displayname}\", BOLD) %>")

  ask("") { |q| q.default = uri.to_s }
  uri
end


begin
  # Define env exportfile (shell environmental variables)
  exportfile = File.absolute_path(__FILE__+"/../../config/env")
  exports = ""
  
  say "\nnpolar-api-setup\n"
  say "* Bootstraps Service and Editlog APIs - creates CouchDB databases sets up Elasticsearch
* Configures sysadmin user and authorisation backend
* Configures environmental variables"
  
  
  api_base_uri = ask_uri("Base URI", ENV["NPOLAR_API"], "http://localhost:9393")
  exports << "export NPOLAR_API=#{api_base_uri}\n"

  # Logger
  log = Logger.new(STDERR)
  log.level = Logger::INFO
  
  # CouchDB config
  couchdb_dsn = ask_uri("CouchDB", ENV["NPOLAR_API_COUCHDB"], "http://couchadmin:password@localhost:5984")
  exports << "export NPOLAR_API_COUCHDB=#{couchdb_dsn}\n"
  ENV["NPOLAR_API_COUCHDB"] = couchdb_dsn.to_s
  
  
  # Elasticsearch
  elasticsearch_dsn = ask_uri("Elasticsearch", ENV["NPOLAR_API_ELASTICSEARCH"], "http://localhost:9200")
  exports << "export NPOLAR_API_ELASTICSEARCH=#{elasticsearch_dsn}\n"

  # Solr
  solr_dsn = ask_uri("Solr", ENV["NPOLAR_API_SOLR"], "http://localhost:8983/solr")
  exports << "export NPOLAR_API_SOLR=#{solr_dsn}\n"
  
  # Bootstrapper
  bootstrap = Npolar::Api::Bootstrap.new
  bootstrap.uri = ENV["NPOLAR_API_COUCHDB"]
  bootstrap.log = log

  say("\n<%= color(\"Sysadmin\", BOLD) %>")
  sysadmin = ask("username") { |q| q.default = ENV["NPOLAR_API_USERNAME"]||"sysadmin" }
  sysadmin_password = ask("password") { |q| q.echo = "*"; q.default = SecureRandom.hex(20) }

  exports << "export NPOLAR_API_USERNAME=#{sysadmin}\n"
  exports << "export NPOLAR_API_PASSWORD=#{}\n"# Inject sysadmin_password here for convenience, but at your own risk

  # Authorization
  say("\n<%= color(\"Authorization\", BOLD) %>")
  authorization = choose do |menu|
    menu.prompt = "Choosing CouchDB will create a User API for authentication and authorization"
    menu.prompt += "\nSee [here] for LDAP configuration instructions"
    menu.choices(:CouchDB, :LDAP)
  end
  
  if authorization == :LDAP
    # LDAP
    say("\n<%= color(\"LDAP\", BOLD) %>")
    ldap_server = ask("host") { |q| q.default = "ldap.example.com" }
    if ldap_server =~ /[.]/
      dc = ldap_server.split(".")
      dc.shift
    end
    ldap_password = ask("scheme") { |q| q.default = "ldaps"; q.in = ["ldap", "ldaps"] }
    ldap_base = ask("base") { |q| q.default = "dc=#{dc.join(",dc=")}" }
    
    ldap_manager = ask("manager (dn)") { |q| q.default = "cn=manager,#{ldap_base}" }
    ldap_password = ask("password") { |q| q.echo = "*"; q.default = SecureRandom.hex(20) }
  
    ldap_dsn = URI::LDAP.build({ host: ldap_server, dn: "/#{ldap_base}"})
    ldap_dsn.user = ldap_manager
    ldap_dsn.password = ldap_password
    #ldap://host:port/dn?attributes?scope?filter?extensions
    exports << "export NPOLAR_API_LDAP=#{ldap_dsn}\n"
  end
  
  if File.exists? exportfile
  mode = "Update"
  else
    mode = "Create"
  end
  say("\n<%= color(\"#{mode} ENV export\", BOLD) %>")

  save = choose do |menu|
    menu.prompt = "#{mode} ENV export file #{exportfile} ?"
    menu.choices(:yes, :no)
  end

  if save == :yes
    File.open("#{exportfile}", "w") { |file| file.write exports }
  else
    say "="*80
    say exports
    say "-"*80
  end

  bashrcfile = File.expand_path("~/.bashrc")
  if File.exists?(bashrcfile) and File.readlines(bashrcfile).grep(/added by npolar-api-setup/).none?

    say("\n<%= color(\".bashrc\", BOLD) %>")

    bashrc = choose do |menu|
      menu.prompt = "Add 'source #{exportfile}' to ~./bashrc ?"
      menu.choices(:yes, :no)
    end

    if bashrc == :yes
      File.open("#{bashrcfile}", "a") { |file| file.write "\nsource #{exportfile} # added by npolar-api-setup\n" }
    end

  end
  

  # Service API
  service_api = Service.factory("service-api")
  service_api.auth.authorizer = (authorization == :LDAP) ? "Npolar::Auth::Ldap" : "Npolar::Auth::Couch"


  say "Bootstrapping the <%= color(\"Service API\", BOLD) %> CouchDB database #{service_api.database} [Authorizer: #{service_api.auth.authorizer}]\n"
  bootstrap.bootstrap(service_api)
  
  # Editlog API
  editlog_api = Service.factory("editlog-api")
  say "\nBootstrapping the <%= color(\"Editlog API\", BOLD) %> CouchDB database #{editlog_api.database}\n"
  bootstrap.bootstrap("editlog-api.json")
    
  if authorization == :CouchDB
    user_api = Service.factory("user-api")
    say "\nBootstrapping <%= color(\"User API\", BOLD) %> database in CouchDB #{user_api.database}\n"
    bootstrap.bootstrap(user_api)
    user_api_dsn = couchdb_dsn

    u = user_api_dsn.user
    p = user_api_dsn.password
    user_api_dsn.user=nil
    user_api_dsn.password=nil
    client = Npolar::Api::Client::JsonApiClient.new(user_api_dsn.to_s)
    client.log = log
    client.username=u
    client.password=p
    
    say "\nInjecting 'api-sysadmin' group into CouchDB database #{user_api_dsn}"

    response = client.put(Npolar::Auth::Couch.sysadmin_group.to_json, "/#{URI.encode(user_api.database)}/#{URI.encode('api-sysadmin')}")
    
    # Sysadmin *user* path
    user_api_dsn.path = "/#{URI.encode(user_api.database)}/#{URI.encode(sysadmin)}"
    
    say "\nInjecting sysadmin user '#{sysadmin}' into CouchDB database #{user_api_dsn}"
    
    sysadmin_user = Npolar::Auth::Couch.sysadmin_user(sysadmin, sysadmin_password)
  
    response = client.put(sysadmin_user.to_json, "/#{URI.encode(user_api.database)}/#{URI.encode(sysadmin)}")
  end

  # Search API (reallay no need to bootstrap now that service and user APIs are in place, but they might not be running yet)
  search_api = Service.factory("search-api")
  say "\nBootstrapping <%= color(\"Search API at /\", BOLD) %> database in CouchDB #{search_api.database}\n"
  bootstrap.bootstrap(search_api)
 
  say "\nSetup completed"
  
  say "\nRun\n\n<%= color(\"source config/env && bundle exec shotgun\", BOLD) %>\n\nto redploy the environmental variables and start in development mode\n"

  say "\nSetup a new API: https://github.com/npolar/api.npolar.no/wiki/New-API\n"
  
  say "Hint:\n ./bin/npolar-api -XPUT http://localhost:9393/service/test-api -d@seed/service/test-api.json\n"
  
end

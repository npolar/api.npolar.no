#!/usr/bin/env ruby

# Ruby-based command to publish Followit tracking data
#
# ./bin/followit-publish /mnt/datasets/Tracking/followit.se https://api.npolar.no/tracking/svalbard-reindeer
# ./bin/followit-publish /mnt/datasets/Tracking/followit.se https://apptest.data.npolar.no/tracking/svalbard-reindeer
#
# For more information: 
# https://github.com/npolar/api.npolar.no/tree/master/external/followit.se/README.md

require "bundler/setup"
require "logger"
require "nokogiri"
require "npolar/api/client"
require "uri"

Dir.chdir(__dir__) do
  require_relative "../ruby/lib/followit"
end

log = Logger.new(STDERR)

def latest(client)

  client.param = { q: "",
    format: "json",
    limit: 1,
    "filter-provider" => "followit.se",
    "date-day" => "measured",
    fields: "measured",
    sort: "-measured"
  }
  
  client.authorization = true
  response = client.get
  
  existing = JSON.parse(response.body)
  if existing.nil? or not existing.key? "feed"
    raise "Failed: #{response.status}"
  end
  existing["feed"]
  
end


begin
  
  if not ENV.key?("NPOLAR_API_USERNAME") or not ENV.key?("NPOLAR_API_PASSWORD")
    raise "Please set NPOLAR_API_USERNAME and NPOLAR_API_PASSWORD"
  end
  if ARGV.size < 1
    raise "Usage: #{__dir__} /path/to/followit/archive [https://api.npolar.no/tracking/svalbard-reindeer]"
  end
  if not File.exist? ARGV[0]
    raise "Source does not exist: #{ARGV[0]}"
  end
    
  source = ARGV[0]
  uri = ARGV[1] ||= "https://api.npolar.no/tracking/svalbard-reindeer"  
  glob = File.join(source, "**/*.xml")
  #if ARGV[2].to_s =~ /\d{4}/
  #  last = DateTime.parse(ARGV[2])
  #end
  #
  
  ts = Followit::TrackerService.new
  client = Npolar::Api::Client::JsonApiClient.new(uri)
  #client.log = Logger.new(nil)
  #client.log.level = Logger::WARN
  
  # get latest date and filter away all messages prior to that...
  feed = latest(client)
  if not feed["entries"].any?
    log.debug "0 existing documents"
    last = DateTime.new(1000)
  else
    last = DateTime.parse feed["entries"][0]["measured"]
    log.debug "#{last} last measured in #{uri} [#{feed["opensearch"]["totalResults"]}]"
  end
  
  docs = []
  c=0
  
  Dir[glob].reject {|f| File.directory? f or File.size(f) == 0 }.map do |f|
    msgs = ts.positions_from_xml(f)
    c = c + msgs.size
    log.debug "#{c} messages / #{docs.size} newer than #{last.to_time.utc.iso8601}"
    add = msgs.select {| m | DateTime.parse(m["measured"]) > last }
    
    # reject if prior to latest
    if add.any?
      log.debug "#{f}"
      c = c + add.size      
      docs += add
    end
  end
  
  if docs.any?
    log.debug "About to POST #{docs.size} new messages to #{uri}"
    client.param = {}
    response = client.post(docs)
  end
  exit(true)

rescue => e
  log.fatal e
  exit(false)
end
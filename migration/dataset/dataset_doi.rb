# encoding: utf-8
#
# Register DOI metadata; bind DOI to destination URL; set dataset.doi 
# $ ./bin/npolar-api-migrator /dataset ::DatasetDoi --really=false --credentials=$DATACITE_CREDENTIALS --log-level=WARN > /dev/null

require "date"
require "time"
require "json"
require "open-uri"
require_relative "../../lib/metadata/dataset"
require_relative "../../lib/metadata/datacite_xml"
require_relative "../../lib/metadata/datacite_mds"

class DatasetDoi
  
  attr_accessor :log
  
  def self.dois
    @@dois ||= ::Metadata::DataciteMds.dois
  end
  
  def self.doi(d)
    year = DateTime.parse(d.released||d.created).year
    ident = d.id.split("-")[0]
    prefix = ::Metadata::DataciteXml::NPOLAR_DOI_PREFIX
    "#{prefix}/npolar.#{year}.#{ident}"
  end
    

  really = (ARGV[2] =~ /^(--really|--really=true)$/) != nil ? true : false
  credentials = []
  if ARGV.find {|a| a=~ /^--credentials=(.+[:].+)/ }
    credentials = $1.split(":")
  end
      
  ::Metadata::DataciteMds.credentials = credentials
  ::Metadata::DataciteMds.testMode = (really == true) ? false : true 
  
  def model
    Hashie::Mash.new #Metadata::Dataset.new [real model disabled because of very slow migration with XML schema validation...]
  end
 
  def migrations
    [doi]
  end

  def doi
    lambda {|d|
      
      doi = self.class.doi(d)
      
      if d.doi? and !d.doi.nil? and d.doi =~ /^#{::Metadata::DataciteXml::NPOLAR_DOI_PREFIX}/ && d.doi != doi and !["10.21334/npolar.2009.a", "10.21334/npolar.1998.a"].include? d.doi 
        log.warn "Dataset DOI #{d.doi} differs from expected (autogenerated) DOI #{doi}"
      end
      
      if d.doi.nil? and is_released? d
        
        released = DateTime.parse(d.released||d.created)
        inamonth = DateTime.now+30
        cand = released < inamonth
        
        if cand
            
          begin
            
            if self.class.dois.include? doi
              raise "Duplicate: DOI #{doi} is already registered" # not a problem if it's for this URI  
            end
            
            url = "https://data.npolar.no/dataset/#{d.id}"
          
            kernel = ::Metadata::DataciteXml.kernel(d, doi)
            xml = kernel.to_xml
            
            ::Metadata::DataciteMds.registerDoi(doi, url, xml)
            
            d.doi = doi
            log.info "#{d.doi} -> #{url}"
          
          rescue => e
            log.error "#{d.id} #{doi} "+e.to_json
          end

        end
        
      end
      
      d
    }
  end

  protected
  
  def is_released? d
    d.released? and d.links? and (d.people? or d.organisations?) and d.licences?
    d.released =~ /^[0-9]{4}/ and
    d.links.any? {|l| ["data", "service"].include? l.rel } and
    (d.people.any? {|p| p.roles.include? "author"} or d.organisations.any? {|p| p.roles.include? "author"}) and
    d.organisations.any? {|p| p.roles.include? "publisher"} and
    d.licences.any?
  end

end